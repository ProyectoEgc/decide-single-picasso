# Generated by Selenium IDE
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from django.contrib.staticfiles.testing import StaticLiveServerTestCase
import time

from base.tests import BaseTestCase
from selenium.webdriver.common.keys import Keys

class TestMultipleOptionVoting(StaticLiveServerTestCase):
    def setUp(self):
        # Configuración específica para Selenium y WebDriver
        options = webdriver.ChromeOptions()
        options.headless = True 
        self.driver = webdriver.Chrome(options=options)

        super().setUp()

        # Configuración específica para Django y el cliente de prueba
        self.base = BaseTestCase()
        self.vars = {}
        self.base.setUp()

    def tearDown(self):
        super().tearDown()
        self.driver.quit()
        self.base.tearDown()

    def test_multiple_option_voting(self):
        self.login_as_admin()
        self.create_question_for_voting()
        

    def login_as_admin(self):
        self.driver.get(f"{self.live_server_url}/admin/login/?next=/admin/")
        self.driver.find_element(By.ID, "id_username").click()
        self.driver.find_element(By.ID, "id_username").send_keys("admin")
        self.driver.find_element(By.ID, "id_password").click()
        self.driver.find_element(By.ID, "id_password").send_keys("qwerty")
        self.driver.find_element(By.CSS_SELECTOR, ".submit-row > input").click()

    

    def create_question_for_voting(self):
        self.driver.find_element(By.LINK_TEXT, "Questions").click()
        self.driver.find_element(By.CSS_SELECTOR, "li > .addlink").click()
        self.driver.find_element(By.ID, "id_type").click()
        dropdown = self.driver.find_element(By.ID, "id_type")
        dropdown.find_element(By.XPATH, "//option[. = 'Score question']").click()
        self.driver.find_element(By.CSS_SELECTOR, "option:nth-child(3)").click()
        self.driver.find_element(By.NAME, "_save").click()
        time.sleep(5)
        wait = WebDriverWait(self.driver, 10)
        error_message_element = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, ".errorlist li")))
        # Assert that the error message is displayed
        self.assertTrue(error_message_element.is_displayed(), "Por favor corrija el siguiente error.")